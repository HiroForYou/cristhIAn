{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/building-a-deep-learning-collection","result":{"data":{"markdownRemark":{"excerpt":"This repository contains various tutorials for the implementation of current DL\nmodels, in the fields of NLP and Computer Vision (I willâ€¦","html":"<p>This repository contains various tutorials for the implementation of current DL\nmodels, in the fields of NLP and Computer Vision (I will expand the catalog\nsoon).</p>\n<h2 id=\"Defining-the-goals\"><a href=\"#Defining-the-goals\" aria-label=\"Defining the goals permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining the goals</h2>\n<p>Before implement any deep learning model you should 1st design how the pipeline\nwould look like and then write the neccessary code to make it work.</p>\n<p>One of the most important components of this pipeline is the collection of data.\nAs far as possible, I will try to provide a dataset to train the model, in such\na way that the experiments are easily reproducible by you.</p>\n<p><strong>I also try to integrate other tools that are very useful</strong></p>\n<ul>\n<li>Pytorch Lightning</li>\n<li>Captum</li>\n</ul>\n<p>Lightning allows you to speed up the training process, and Captum provides\nbeautiful insights into the interpretability and explicability of the models. I\nsuggest that you also integrate it into your arsenal of tools as an ML Engineer.</p>\n<h3 id=\"Pytorch-Lightning\"><a href=\"#Pytorch-Lightning\" aria-label=\"Pytorch Lightning permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pytorch Lightning</h3>\n<p>An implementation of Lightning in our models would look something like this :-</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytorch_lightning <span class=\"token keyword\">as</span> pl\n\n<span class=\"token comment\"># definition of the model</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LitAutoEncoder</span><span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">.</span>LightningModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>encoder <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n          nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">28</span> <span class=\"token operator\">*</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>decoder <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n          nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span> <span class=\"token operator\">*</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># in lightning, forward defines the prediction/inference actions</span>\n        embedding <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> embedding\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">training_step</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batch<span class=\"token punctuation\">,</span> batch_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># training_step defined the train loop. It is independent of forward</span>\n        x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> batch\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        z <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x_hat <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n        loss <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>mse_loss<span class=\"token punctuation\">(</span>x_hat<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token string\">'train_loss'</span><span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> loss\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">configure_optimizers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> optimizer\n\n<span class=\"token comment\"># training boosting</span>\ndataset <span class=\"token operator\">=</span> MNIST<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">,</span> val <span class=\"token operator\">=</span> random_split<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">55000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nautoencoder <span class=\"token operator\">=</span> LitAutoEncoder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrainer <span class=\"token operator\">=</span> pl<span class=\"token punctuation\">.</span>Trainer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrainer<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>autoencoder<span class=\"token punctuation\">,</span> DataLoader<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DataLoader<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Note: Training_step defines the training loop. Forward defines how the\nLightningModule behaves during inference/prediction.</p>\n<h3 id=\"Captum\"><a href=\"#Captum\" aria-label=\"Captum permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Captum</h3>\n<p>Declarative APIs are simple &#x26; easier for users to structure the Tree, but in\nreal world scenarios we will have a JSON Object representing the Folder Tree and\nwe need to render that with the Imperative API.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> captum<span class=\"token punctuation\">.</span>attr <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n                        IntegratedGradients<span class=\"token punctuation\">,</span>\n                        Saliency<span class=\"token punctuation\">,</span>\n                        DeepLift<span class=\"token punctuation\">,</span>\n                        NoiseTunnel<span class=\"token punctuation\">,</span>\n                        visualization <span class=\"token keyword\">as</span> viz\n                        <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Gradient-based attribution</span>\nintegrated_gradients <span class=\"token operator\">=</span> IntegratedGradients<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\nattributions_ig <span class=\"token operator\">=</span> integrated_gradients<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">(</span>\n  <span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>pred_label_idx<span class=\"token punctuation\">,</span> n_steps<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Let's visualize the image and corresponding attributions</span>\n<span class=\"token comment\"># by overlaying the latter on the image.</span>\ndefault_cmap <span class=\"token operator\">=</span> LinearSegmentedColormap<span class=\"token punctuation\">.</span>from_list<span class=\"token punctuation\">(</span><span class=\"token string\">'custom blue'</span><span class=\"token punctuation\">,</span>\n                                                <span class=\"token punctuation\">[</span>\n                                                  <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#ffffff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                                  <span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#000000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                                  <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#000000'</span><span class=\"token punctuation\">)</span>\n                                                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                                N<span class=\"token operator\">=</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\n\n_ <span class=\"token operator\">=</span> viz<span class=\"token punctuation\">.</span>visualize_image_attr<span class=\"token punctuation\">(</span>\n            np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>attributions_ig<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>transformed_img<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            method<span class=\"token operator\">=</span><span class=\"token string\">'heat_map'</span><span class=\"token punctuation\">,</span>\n            cmap<span class=\"token operator\">=</span>default_cmap<span class=\"token punctuation\">,</span>\n            show_colorbar<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n            sign<span class=\"token operator\">=</span><span class=\"token string\">'positive'</span><span class=\"token punctuation\">,</span>\n            outlier_perc<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p align=\"center\">\n  <img src=\"https://cms.gilberttanner.com/content/images/size/w2000/2020/08/GradientSHAP-Example.png\">\n</p>\n<p>Now you have powerful tools to enhance your DL projects.</p>\n<h2 id=\"About-the-tutorials\"><a href=\"#About-the-tutorials\" aria-label=\"About the tutorials permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About the tutorials</h2>\n<p><a href=\"https://github.com/HiroForYou/Deep-Learning-Collection\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=HiroForYou&#x26;repo=Deep-Learning-Collection&#x26;show_owner=true\"></a></p>\n<p>The code presented in the repository is part of my personal collection that has\nbeen compiled from various YouTube channels, associated repositories, etc. I try\nto credit the original authors, so feel free to go back to the original sources.</p>\n<p>There is also code of my authorship, but feel free to edit it, we are all\ncommunity!</p>\n<p>The tutorials are divided into level, the basic level is for people who are just\ntaking their first steps in DL, while the advanced level takes into account that\nyou already have experience at the time of debugging and/or optimizing the\nmodels presented. .</p>\n<p>I will increase the collection of available models, as well as share the weights\nof the network, so that you do not have complications!</p>\n<h2 id=\"Popular-Models\"><a href=\"#Popular-Models\" aria-label=\"Popular Models permalink\" class=\"gatsby-remark-autolink\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Popular Models</h2>\n<p>I am going to list a few models, which I consider essential for every Deep\nLearning enthusiast.</p>\n<ul>\n<li><a href=\"https://github.com/HiroForYou/Deep-Learning-Collection/blob/main/DL/Avanzado/Vision-Transformer\">Vision Transformer - ViT</a></li>\n<li><a href=\"https://github.com/HiroForYou/Deep-Learning-Collection/blob/main/DL/Avanzado/Image-Captioning\">Image Caption</a></li>\n<li><a href=\"https://github.com/HiroForYou/Deep-Learning-Collection/blob/main/DL/Avanzado/Segmentaci%C3%B3n-UNET\">U-NET</a></li>\n</ul>\n<p>And most importantly, don't forget to leave your star in the repository!</p>\n<p>Thanks for reading the post, i hope you learned something and enjoyed it.<br>\nBye have a nice day!</p>","timeToRead":3,"id":"4978475e-70b6-5c98-80f1-d1be44aeb362","frontmatter":{"date":"April 09, 2021","title":"Building A Deep Learning Collection"}}},"pageContext":{"slug":"/blog/building-a-deep-learning-collection"}},"staticQueryHashes":["1033876704","3435786681","550521386"]}